class ListNode {
    init(value) {
        this.value = value;
        this.next = nil;
    }
}

class List {
    init() {
        this.head = nil;
    }

    class new_with_head(value) {
        var l = List();
        l.push(value);
        return l;
    }

    // Push value to the head of the list.
    push(value) {
        var node = ListNode(value);
        if this.head == nil {
            this.head = node;
        } else {
            node.next = this.head;
            this.head = node;
        }
    }

    // Pop value from the head of the list.
    pop() {
        if this.head {
            var node = this.head;
            this.head = this.head.next;
            return node.value;
        }
    }

    iter_nodes() {
        var node = this.head;
        return fun() {
            if node {
                var next = node;
                node = node.next;
                return next;
            }
        };
    }

    iter() {
        var node = this.head;
        return fun() {
            if node {
                var next = node.value;
                node = node.next;
                return next;
            }
        };
    }

    // Call f(value) for each value in the list, from last value appended to first.
    // If f returns a truthy value, stop iterating and return that value.
    for_each(f) {
        for value in this.iter() {
            var r = f(value);
            if r {
                return r;
            }
        }
    }

    accumulate(acc, f) {
        for value in this.iter() {
            acc = f(acc, value);
        }
        return acc;
    }

    count() {
        return this.accumulate(0, fun(count, _value) {
            count = count + 1;
        });
    }
}

return List;
