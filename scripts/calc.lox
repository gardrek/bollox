class ListNode {
    init(value) {
        this.value = value;
        this.next = nil;
    }
}

class List {
    init() {
        this.head = nil;
    }

    class new_with_head(value) {
        var l = List();
        l.push(value);
        return l;
    }

    // Push value to the head of the list.
    push(value) {
        var node = ListNode(value);
        if this.head == nil {
            this.head = node;
        } else {
            node.next = this.head;
            this.head = node;
        }
    }

    // Pop value from the head of the list.
    pop() {
        if this.head {
            var node = this.head;
            this.head = this.head.next;
            return node.value;
        }
    }

    iter_nodes() {
        var node = this.head;
        return fun() {
            if node {
                var next = node;
                node = node.next;
                return next;
            }
        };
    }

    iter() {
        var node = this.head;
        return fun() {
            if node {
                var next = node.value;
                node = node.next;
                return next;
            }
        };
    }

    // Call f(value) for each value in the list, from last value appended to first.
    // If f returns a truthy value, stop iterating and return that value.
    for_each(f) {
        for value in this.iter() {
            var r = f(value);
            if r {
                return r;
            }
        }
    }

    accumulate(acc, f) {
        for value in this.iter() {
            acc = f(acc, value);
        }
        return acc;
    }

    count() {
        return accumulate(0, fun(count, _value) {
            count = count + 1;
        });
    }
}

class DefaultStack < List {
    init(default) {
        this.default = default;
        super.init();
    }

    pop() {
        var val = super.pop();
        if val {
            return val;
        } else {
            return this.default;
        }
    }
}

var stack = DefaultStack(0);
var input = "";
var wait_for_input = true;

fun concat_list(acc, v) {
    return acc + to_string(v) + ", ";
}

fun print_stack(stack) {
    print "[ " + stack.accumulate("", concat_list) + "]";
}

while wait_for_input {
    input = read();
    if ((input == "quit") or (input == "q") or (input == "exit")) {
        wait_for_input = false;
        print "quitting...";
    } else if input != "" {
        var number = to_number(input);
        if number {
            stack.push(number);
        } else switch input {
            "pop" {
                var a = stack.pop();
                print a;
            }
            "dup" {
                var a = stack.pop();
                stack.push(a);
                stack.push(a);
            }
            "swap" {
                var b = stack.pop();
                var a = stack.pop();
                stack.push(b);
                stack.push(a);
            }
            "add" {
                var b = stack.pop();
                var a = stack.pop();
                stack.push(a + b);
            }
            "sub" {
                var b = stack.pop();
                var a = stack.pop();
                stack.push(a - b);
            }
            "mul" {
                var b = stack.pop();
                var a = stack.pop();
                stack.push(a * b);
            }
            "div" {
                var b = stack.pop();
                var a = stack.pop();
                stack.push(a / b);
            }
            "mod" {
                var b = stack.pop();
                var a = stack.pop();
                stack.push(a % b);
            }
        }
        print_stack(stack);
    }
}
