var List = require("scripts/list.blx");

class DefaultStack < List {
    init(default) {
        this.default = default;
        super.init();
    }

    pop() {
        var val = super.pop();
        if val {
            return val;
        } else {
            return this.default;
        }
    }
}

var stack = DefaultStack(0);
var input = "";
var wait_for_input = true;

fun concat_list(acc, v) {
    return acc + to_string(v) + ", ";
}

fun print_stack(stack) {
    print "[ " + stack.accumulate("", concat_list) + "]";
}

fun is_whitespace_or_eof(c) {
    return c == 10 or c == 13 or c == 32 or c == -1;
}

var last_char;
fun read_word() {
    while true {
        last_char = getc();

        if last_char == -1 {
            return nil;
        }

        if !is_whitespace_or_eof(last_char) {
            break;
        }

    }

    var word = "";
    while !is_whitespace_or_eof(last_char) {
        word = word + chr(last_char);

        last_char = getc();
    }

    return word;
}

while wait_for_input {
    input = read_word();
    if !input or input == "quit" or input == "q" or input == "exit" {
        wait_for_input = false;
    } else if input != "" {
        var number = to_number(input);
        if number {
            stack.push(number);
        } else switch input {
            "view", "v" {
                print_stack(stack);
            }
            "pop", "p" {
                var a = stack.pop();
                print a;
            }
            "dup", "d" {
                var a = stack.pop();
                stack.push(a);
                stack.push(a);
            }
            "swap", "s" {
                var b = stack.pop();
                var a = stack.pop();
                stack.push(b);
                stack.push(a);
            }
            "add", "+" {
                var b = stack.pop();
                var a = stack.pop();
                stack.push(a + b);
            }
            "sub", "-" {
                var b = stack.pop();
                var a = stack.pop();
                stack.push(a - b);
            }
            "mul", "*" {
                var b = stack.pop();
                var a = stack.pop();
                stack.push(a * b);
            }
            "div", "/" {
                var b = stack.pop();
                var a = stack.pop();
                stack.push(a / b);
            }
            "mod", "%" {
                var b = stack.pop();
                var a = stack.pop();
                stack.push(a % b);
            }
        }
    }
}
