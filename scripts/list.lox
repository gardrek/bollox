class ListNode {
    init(value) {
        this.value = value;
        this.next = nil;
    }
}

class List {
    init() {
        this.head = nil;
    }

    new_with_head(value) {
        var l = List();
        l.push(value);
        return l;
    }

    // Push value to the head of the list.
    push(value) {
        var node = ListNode(value);
        if (this.head == nil) {
            this.head = node;
        } else {
            node.next = this.head;
            this.head = node;
        }
    }


    // Pop value from the head of the list.
    pop() {
        if this.head {
            var node = this.head;
            this.head = this.head.next;
            return node.value;
        }
    }

    // Call f(value) for each value in the list, from last value
    // appended to first. If f returns a truthy value, stop iterating.
    for_each(f) {
        var node = this.head;
        while (node != nil) {
            if (f(node.value)) {
                return;
            }
            node = node.next;
        }
    }

    iter() {
        var s = this;

        class Iter {
            init() {
                this.node = s.head;
            }

            next() {
                if this.node {
                    var next = this.node.value;
                    this.node = this.node.next;
                    return next;
                }
            }
        }

        return Iter().next;
    }

    accumulate(acc, f) {
        var node = this.head;
        while (node != nil) {
            acc = f(acc, node.value);
            node = node.next;
        }
        return acc;
    }

    count() {
        var count = 0;
        var node = this.head;
        while (node != nil) {
            count = count + 1;
            node = node.next;
        }
        return count;
    }
}

return List;
